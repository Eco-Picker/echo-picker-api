name: CI/CD Pipeline

on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          GEMINI_APP_KEY: ${{ secrets.GEMINI_APP_KEY }}
        run: ./gradlew build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eco-picker-api:latest

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build
    steps:
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCE_SA_KEY_BASE64 }}'
      - name: Deploy to Google Compute Engine
        env:
          GCE_INSTANCE_NAME: ${{ secrets.GCE_INSTANCE_NAME }}
          GCE_INSTANCE_ZONE: ${{ secrets.GCE_INSTANCE_ZONE }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          GEMINI_APP_KEY: ${{ secrets.GEMINI_APP_KEY }}
        run: |
          gcloud compute ssh $GCE_INSTANCE_NAME --zone $GCE_INSTANCE_ZONE --command "
          sudo bash << EOF
          if ! command -v docker &> /dev/null; then
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\"
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
          fi
          
          # Create an environment file
          cat << EOT > /tmp/.env
          DB_URL=$DB_URL
          DB_USERNAME=$DB_USERNAME
          DB_PASSWORD=$DB_PASSWORD
          SMTP_PASSWORD=$SMTP_PASSWORD
          GEMINI_APP_KEY=$GEMINI_APP_KEY
          EOT
          
          docker pull $DOCKERHUB_USERNAME/eco-picker-api:latest
          docker stop eco-picker-api || true
          docker rm -f eco-picker-api || true
          docker run --env-file /tmp/.env -d --name eco-picker-api -p 15000:15000 $DOCKERHUB_USERNAME/eco-picker-api:latest
          
          # Clean up the environment file
          rm /tmp/.env
          EOF
          "